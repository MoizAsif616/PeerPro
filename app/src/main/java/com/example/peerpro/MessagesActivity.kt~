package com.example.peerpro

import android.os.Bundle

import com.google.firebase.Timestamp
import android.view.View
import android.view.inputmethod.InputMethodManager
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.peerpro.databinding.ActivityMessagesBinding
import com.example.peerpro.models.Message
import com.example.peerpro.models.User
import com.example.peerpro.utils.UserCache
import com.google.firebase.firestore.FieldValue
import com.google.firebase.firestore.FirebaseFirestore
import com.squareup.picasso.Picasso
import java.util.*

class MessagesActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMessagesBinding
    private lateinit var messagesAdapter: MessagesAdapter
    private lateinit var chatId: String
    private lateinit var receiverId: String
    private val firestore = FirebaseFirestore.getInstance()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMessagesBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Get data from intent
        chatId = intent.getStringExtra("chat_id").toString()
        receiverId = intent.getStringExtra("receiver_id").toString()

        if(chatId.isEmpty() || receiverId.isEmpty()) {
            Toast.makeText(this, "Error occurred. Please restart the app", Toast.LENGTH_SHORT).show()
            finish()
            return
        }

        // Setup UI
        setupToolbar()
        setupRecyclerView()
        fetchReceiverProfile()

        binding.sendBtn.setOnClickListener {
            sendMessage()
        }
    }

    private fun setupToolbar() {
        binding.peerName.text = intent.getStringExtra("receiver_name") ?: "Unknown"
        binding.backBtn.setOnClickListener { finish() }
    }

    //TODO: Search for stackFromEnd property
    private fun setupRecyclerView() {
        messagesAdapter = MessagesAdapter(chatId, UserCache.getId() ?: "")
        binding.messagesRecyclerView.apply {
            layoutManager = LinearLayoutManager(this@MessagesActivity).apply {
                stackFromEnd = true
            }
            adapter = messagesAdapter
            addOnLayoutChangeListener { _, _, _, _, bottom, _, _, _, oldBottom ->
                if (bottom < oldBottom) {
                    post { scrollToPosition(messagesAdapter.itemCount - 1) }
                }
            }
        }
    }

    private fun fetchReceiverProfile() {
        firestore.collection("users").document(receiverId).get()
            .addOnSuccessListener { document ->
                document.toObject(User::class.java)?.let { user ->
                    if (!user.profilePicUrl.isNullOrEmpty()) {
                        Picasso.get().load(user.profilePicUrl)
                            .placeholder(R.drawable.default_peer)
                            .into(binding.peerImage)
                    }
                }
            }
    }

    private fun sendMessage() {
        val messageText = binding.messageInput.text.toString().trim()
        if (messageText.isEmpty()) return

        val myId = UserCache.getId() ?: return
        val newMessage = hashMapOf(
            "chatId" to chatId,
            "senderId" to myId,
            "text" to messageText,
            "timestamp" to Timestamp.now(),
            "isSeen" to false
        )

        // Clear input
        binding.messageInput.text.clear()
        //hideKeyboard()

        // Add to Firestore
        firestore.collection("messages").add(newMessage)
            .addOnSuccessListener { documentReference ->
                messagesAdapter.addMessage(
                  Message(
                    senderId = myId,
                    chatId = chatId,
                    text = messageText,
                    timestamp = newMessage["timestamp"] as Timestamp,
                    isSeen = false,
                      deletedBy = ""
                  )
                )
                binding.messagesRecyclerView.smoothScrollToPosition(messages.size - 1)
            }
            .addOnFailureListener {
                Toast.makeText(this, "Failed to send message, check your connection", Toast.LENGTH_SHORT).show()
            }
    }

    private fun hideKeyboard() {
        val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
        imm.hideSoftInputFromWindow(binding.messageInput.windowToken, 0)
    }

    override fun onDestroy() {
        super.onDestroy()
        messagesAdapter.cleanup()
    }
}