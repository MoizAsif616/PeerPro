package com.example.peerpro

import android.content.res.Resources
import android.os.Bundle
import android.widget.TextView
import android.graphics.Color
import android.view.Gravity
import android.widget.FrameLayout
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatDelegate
import com.google.android.material.tabs.TabLayout
import com.google.android.material.tabs.TabLayout.OnTabSelectedListener

class MainActivity : ComponentActivity() {
  override fun onCreate(savedInstanceState: Bundle?) {
    // Optional: Force dark/light mode (remove if you want system default)
    AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)
    super.onCreate(savedInstanceState)
    setContentView(R.layout.activity_main)


    val tabLayout = findViewById<TabLayout>(R.id.tabLayout)
    val icons = listOf(R.drawable.sessions, R.drawable.tutors, R.drawable.notes, R.drawable.me)

    // Create tabs with centered icons using FrameLayout
    icons.forEach { iconRes ->
      val tab = tabLayout.newTab()
      val frameLayout = FrameLayout(this).apply {
        layoutParams = FrameLayout.LayoutParams(
          FrameLayout.LayoutParams.MATCH_PARENT,
          FrameLayout.LayoutParams.WRAP_CONTENT
        )
      }

      val linearLayout = LinearLayout(this).apply {
        orientation = LinearLayout.VERTICAL
        gravity = Gravity.CENTER
        layoutParams = FrameLayout.LayoutParams(
          FrameLayout.LayoutParams.WRAP_CONTENT,
          FrameLayout.LayoutParams.WRAP_CONTENT,
          Gravity.CENTER
        )
      }

      val imageView = ImageView(this).apply {
        setImageResource(iconRes)
        background = null
        layoutParams = LinearLayout.LayoutParams(
          LinearLayout.LayoutParams.WRAP_CONTENT,
          LinearLayout.LayoutParams.WRAP_CONTENT
        ).apply {
          topMargin = 8.dpToPx() // Convert dp to pixels if needed
        }
        scaleType = ImageView.ScaleType.CENTER_INSIDE
      }

      val textView = TextView(this).apply {
        text = when (iconRes) {
          R.drawable.sessions -> "Sessions"
          R.drawable.tutors -> "Tutors"
          R.drawable.notes -> "Notes"
          R.drawable.me -> "Me"
          else -> "Tab"
        }
        gravity = Gravity.CENTER
        textSize = 12f
        setTextColor(Color.WHITE) // Or your preferred color
        layoutParams = LinearLayout.LayoutParams(
          LinearLayout.LayoutParams.WRAP_CONTENT,
          LinearLayout.LayoutParams.WRAP_CONTENT
        ).apply {
          topMargin = 4.dpToPx() // Space between icon and text
        }
      }

      linearLayout.addView(imageView)
      linearLayout.addView(textView)
      frameLayout.addView(linearLayout)
      tab.customView = frameLayout
      tabLayout.addTab(tab)
    }

    // Add tab selection listener with Toast messages
    tabLayout.addOnTabSelectedListener(object : OnTabSelectedListener {
      override fun onTabSelected(tab: TabLayout.Tab?) {
        tab?.position?.let { position ->
          val message = when (position) {
            0 -> "Chats selected"
            1 -> "Tutors selected"
            2 -> "Notes selected"
            3 -> "Profile selected"
            else -> "Unknown tab selected"
          }
          Toast.makeText(this@MainActivity, message, Toast.LENGTH_SHORT).show()
        }
      }

      override fun onTabUnselected(tab: TabLayout.Tab?) {}
      override fun onTabReselected(tab: TabLayout.Tab?) {}
    })
  }
  fun Int.dpToPx(): Int = (this * Resources.getSystem().displayMetrics.density).toInt()
}
